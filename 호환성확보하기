# 1. 호환성 확보하기

## 사용자 정보 보호 원칙
	1. 최소한의 권한만 요청
	2. 필요할 때 권한 요청
	3. 사용자가 권한을 허용하지 않은 경우 올바르게 처리
	4. 사용자가 예상할 수 없는 상황에서 사용자 정보에 접근하지 않음
	5. 사용하는 라이브러리에 주의
	
## 데이터 액세스 분석
>어떤 코드에서 어떤 권한을 사용하는지 알기가 어려움
> 데이터 액세스 분석을 위한 API 추가
> > 권한이 필요한 API 호출시 콜백 : AppOpsManager#setOnOpNotedCallback
> > 속성 태그 :
Context#createAttributionContext

## 일회성 권한
  > 권한 요청에 이번만 허용 추가
  > 이번만 허용 --> 백그라운드로 전한 --> 타이머 시작 --> 타이머 종료 --> 권한 회수
  > 사용자가 일회성 권한을 사용하는지는 알 수 없음
  ```
  when{
	checkSelfPermission(...) == GRANTED -> {
		//Perform action
		권한 허용된 경우
	}
	shouldShowRequestPermissionRationale(...) -> {
		권한 요청을 거부한 적이 있는지 확인
		거부한 적이 있다면 해당 권한이 왜 필요한지 ui 표시	
	}
	else -> {
		requestPermissions(...)
	}
  }
  ```
  ### Jetpack Activity Result API
  > 알파 단계 API
  > 간편하게 다른 Activity에서 결과 값을 전달 받을 수 있음
  > startActivityForResult 대체 가능
  ```
	//Request permission contract
	private val requestPermission = 
		registerForActivityResult(ActivityResultContracts
			.RequestPermission()) { isGranted ->
				//Do something if permission granted
			}
	private fun requestBLuetoothPermission() {
		requestPermission.launch(permission.BLUETOOTH)
	}
 ```

## 백그라운드 위치 권한
  ### 점진적 권한 요청( 타깃 SDK Android 11 이상 )
  > 포그라운드 위치 권한(ACCESS_COARSE_LOCATION 혹은 ACCESS_FINE_LOCATION) 획득 후, 
  > 백그라운드 위치 권한(ACCESS_BACKGROUND_LOCATION)권한을 요청해야 함
  > 포그라운드 위치 권한 없이 백그라운드 위치 권한을 요청할 경우 권한 요청이 자동 거부 됨
  > 포그라운드 위치 권한 요청 --> 백그라운드 위치 권한이 필요한 이유를 설명(앱 UI) --> 백그라운드 위치 권한 획득

 ### 권한 대화 상자 ( Android 11)
   > 권한을 한번 거부하면 거부 및 다시 묻지 않음이 없고 두번 연속으로 권한 요청을 거부 하면 자동으로 다시 묻지 않음 적용
  
 ### 권한 자동 재설정
   > 타깃 SDK가 Android 11 이상인 앱의 경우, 사용자가 사용하지 않는 앱의 권한이 자동으로 거부 됨
   > 타깃 SDK 버전이 Android 11 미만인 경우에도 사용자가 명시적으로 해당 기능 적용 가능
   > 사용하지 않는 앱 : 몇개월간 사용자 상호작용이 없는 앱

  ### 권한 자동 재설정 예외
   > Intent(ACTION_APPLICATION_DETAILS_SETTINGS)
   > 사용자가 명시적으로 앱이 사용되지 않는 경우 권한 삭제 설정 가능
   
  ### 다른 앱 위에 그리기 권한
   > 타깃 SDK 관계 없이 적용
   > SYSTEM_ALERT_WINDOWS 자동 획득
   >     - ROLE_CALL_SCREENING
   >     - MediaProjection으로 화면 캡처 중인 앱
   >   ACTION_MANAGE_OVERLAY_PERMISSION
   >      - 대상 패키지 지정 불가
   >      - 사용자가 명시적으로 앱을 선택
   >    Bubble, FullscreenIntent, PiP 등 대안으로 활용

   ### READ_PHONE_NUMBERS
   > 타깃 버전이 Android 11 이상인 경우, 전화 번호 확인(getLine1Number())을 위해 해당 권한이 필요
   ```
	<manifest>
		<user-permission android:name="READ_PHONE_STATE"
						 android:maxSdkVersion="29" />
		<user-permission android:name="READ_PHONE_NUMBERS" />
	</manifest>
  ```
### 패키지 공개 상태
  > 타깃 SDK Android 11 이상인 엡의 경우, 디바이스에 설치된 다른 앱 목록을 알 수 없음
  > 설치 여부를 꼭 확인할 필요가 있는 경우, 앱 매니페스트에 미리 선언
  > 특별한 경우에 한 해, 설치된 모든 앱 목록을 확인할 수 있는 QUERY_ALL_PACKAGES 권한을 사용 가능
  ```
   packageManager.getPackageInfo("com.another.app", 0 )
    - 앱 설치 여부와 관계 없이 NameNotFoundException 예외 발생
   packageManager.getInstalledPackages(0)
    - 자기 자신과 적은 수의 시스템 필수 패키지 목록만 반환
   packageManager.queryIntentActivities(intent, 0)
    - 자기 자신과 적은 수의 시스템 필수 패키지 목록만 반환
   명시적 Intent를 통한 방법
    - 예외가 발생
```
   #### 특정 패키지 설치 여부 확인
   ```
	<manifest>
		<queries>
			<intent>
				<package android:name="android.intent.action.SEND" />
				<package android:mimeType="image/jpeg" />
			</intent>
		</queries>
	</manifest>	
 ```
   #### 모든 앱 목록을 확인
   > Google Play 정책에 의해 예외 적인 경우에만 허용 예정!
   > 런처, 접근성 앱, 브라우저, P2P 공유 앱, 디바이스 관리 앱, 보안 앱 등
   ```
     <manifest>
		<use-permission android:name="android.permission.QUERY_ALL_PACKAGES" />
	</manifest>	
 ```
   #### Mac Address
   > 타깃 SDK 버전이 30 이상인 경우, Mac Address 확인 불가
   > 영향 받는 기능
   >    - getifaddrs()
   >    - NetworkInterface.getHardwareAddress()
   >    - ip 명령어
   >    - NETLINK_ROUTE 소켓에 bind() 불가



     


